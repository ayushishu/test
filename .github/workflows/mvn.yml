# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Builder-Docker-Image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: ODL-Java-Code/Ubuntu/
          tags: ${{ vars.IMAGENAME1 }}:latest  
          outputs: type=docker,dest=/tmp/${{ vars.IMAGENAME1 }}.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ vars.IMAGENAME1 }}   
          path: /tmp/${{ vars.IMAGENAME1 }}.tar


  infrautils:
    runs-on: ubuntu-latest
    needs: Builder-Docker-Image
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ vars.IMAGENAME1 }}
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/${{ vars.IMAGENAME1 }}.tar
      - name: Maven Build 
        run: |
         docker run ${{ vars.IMAGENAME1 }}:latest  bash -c 'wget https://github.com/lfit/releng-global-jjb/raw/cdd11933d0985372daf527d7e54f2a741f62a5f0/shell/python-tools-install.sh && chmod +x python-tools-install.sh && ./python-tools-install.sh && git clone "https://github.com/opendaylight/infrautils.git" && cd infrautils && mvn clean install'
  netconf:
    runs-on: ubuntu-latest
    needs: Builder-Docker-Image
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ vars.IMAGENAME1 }}
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/${{ vars.IMAGENAME1 }}.tar
      - name: Maven Build 
        run: |
         docker run ${{ vars.IMAGENAME1 }}:latest  bash -c 'wget https://github.com/lfit/releng-global-jjb/raw/cdd11933d0985372daf527d7e54f2a741f62a5f0/shell/python-tools-install.sh && chmod +x python-tools-install.sh && ./python-tools-install.sh && git clone "https://github.com/opendaylight/netconf.git" && cd /netconf && mvn clean install'
 
#   # This workflow contains a single job called "build"
#   Integration-distribution:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
     
#       - name: Build Docker image
#         run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:Integration-distribution ODL-Java-Code/Ubuntu/
#       - name: Test 
#         run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:Integration-distribution bash -c 'git clone "https://git.opendaylight.org/gerrit/integration/distribution" && cd /distribution && mvn clean install'  
 
#   aaa:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:aaa ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:aaa bash -c 'git clone "https://github.com/opendaylight/aaa.git" && cd /aaa && mvn clean install'  
  
#   yangtools:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:yangtools ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:yangtools bash -c 'git clone "https://github.com/opendaylight/yangtools.git" && cd /yangtools && mvn clean install'  
   
#   Serviceutils:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:serviceutils ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:serviceutils bash -c 'git clone "https://github.com/opendaylight/serviceutils.git" && cd /serviceutils && mvn clean install'  
   
#   odlparent: 
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:odlparent ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:odlparent bash -c 'git clone "https://github.com/opendaylight/odlparent.git" && cd /odlparent && mvn clean install'  

#   Openflowplugin:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:openflowplugin ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:openflowplugin bash -c 'git clone "https://github.com/opendaylight/openflowplugin.git" && cd /openflowplugin && mvn clean install'  
#   Ovsdb:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:ovsdb ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:ovsdb bash -c 'git clone "https://github.com/opendaylight/ovsdb.git" && cd /ovsdb && mvn clean install'  
#   Lispflowmapping:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:lispflowmapping ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:lispflowmapping bash -c 'git clone "https://github.com/opendaylight/lispflowmapping.git" && cd /lispflowmapping && mvn clean install'  
  
#   Controller:
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout repository
#             uses: actions/checkout@v2

#           - name: Build Docker image
#             run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:controller ODL-Java-Code/Ubuntu/
#           - name: Test 
#             run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:controller bash -c 'export JAVA_HOME=/usr/lib/jvm/java-1.17.0-openjdk-amd64 &&  git clone "https://github.com/opendaylight/controller.git" && cd /controller && mvn clean install'  
#    ## Problem 
  daexim:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v2

          - name: Build Docker image
            run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:daexim ODL-Java-Code/Ubuntu/
          - name: Test 
            run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }}:daexim bash -c 'export JAVA_HOME=/usr/lib/jvm/java-1.17.0-openjdk-amd64 &&  git clone "https://github.com/opendaylight/daexim.git" && cd /daexim  &&  mvn clean install -DskipTests'  

