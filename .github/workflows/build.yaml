# name: Build and Run Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   Docker-Images-Build-Odl-Java-Code:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
     
#       - name: Build Docker image
#         run: docker build -t ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }} ODL-Java-Code/Ubuntu/
#       - name: Test 
#         run: docker run ${{ vars.REPOSITORY}}/${{ vars.IMAGENAME1 }} bash -c 'git clone "https://git.opendaylight.org/gerrit/integration/distribution" && cd /distribution && mvn clean install'  
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Push Docker image
#         run: docker push ${{ vars.REPOSITORY }}/${{ vars.IMAGENAME1}} 
#   Build-And-Test-Robot-Docker-Image:
#     runs-on: ubuntu-latest

#     services:
#       opendaylight:
#         image: opendaylight/opendaylight:0.18.1
#         env:
#           FEATURES: odl-restconf,odl-netconf-topology
#         ports:
#           - 8181:8181
#         options: --name odl-container
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
      
#       - name: Build Docker image
#         run: docker build -t ${{ vars.REPOSITORY }}/${{ vars.IMAGENAME2 }} robot/        

#       - name: Test   
#         run: |
#           docker run --network container:odl-container ${{ vars.REPOSITORY }}/${{ vars.IMAGENAME2 }} bash -c 'yum install -y git python3-pip && pip3 install robotframework robotframework-extendedrequestslibrary && git clone https://github.com/opendaylight/integration-test.git && cd integration-test/csit/suites/integration/basic && robot -L debug --variable USER_HOME:/home/centos --variable DEFAULT_LINUX_PROMPT:\$ --variable ODL_SYSTEM_IP:opendaylight --variable ODL_SYSTEM_USER:centos ./restconf_modules.robot'
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       - name: Push Docker image
#         run: docker push ${{ vars.REPOSITORY }}/${{ vars.IMAGENAME2 }}
name: code

on:
  - push
  - pull_request

jobs:
  tox-verify:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python "3.11"
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Test with tox
      run: tox
      
      
  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        shell: bash
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color
        shell: bash


#   jjb-validation:
#         runs-on: ubuntu-latest
        
#         steps:
#           - uses: actions/setup-python@v4
#             id: setup-python
#             with:
#               python-version: "3.11"
#           - name: Clone git submodules
#             run: git submodule update --init
#           - name: Run JJB Verify
#             run: |
#               python -m pip install --upgrade pip
#               pip install jenkins-job-builder
#               mkdir -p "${HOME}/.config/jenkins_jobs"
#               cat << EOF > "${HOME}/.config/jenkins_jobs/jenkins_jobs.ini"
#               [job_builder]
#               ignore_cache=True
#               keep_descriptions=False
#               include_path=.
#               recursive=True
#               query_plugins_info=False
#               config-xml=True
#               EOF
#               jenkins-jobs test -o archives/job-configs jjb/         
